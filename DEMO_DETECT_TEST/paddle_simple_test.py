#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nPaddleOCR 简化测试\n\"\"\"\n\nimport os\nfrom paddleocr import PaddleOCR\n\ndef simple_test():\n    \"\"\"简化的PaddleOCR测试\"\"\"\n    \n    print(\"🚀 开始PaddleOCR简化测试\")\n    print(\"=\" * 50)\n    \n    # 初始化PaddleOCR\n    ocr = PaddleOCR(\n        use_textline_orientation=True,\n        lang='en'\n    )\n    print(\"✅ PaddleOCR初始化成功\")\n    \n    # 测试几张图片\n    test_images = [\n        \"DEMO_DETECT_TEST/yolo_arrow_test_results/2_target_1_original.jpg\",\n        \"DEMO_DETECT_TEST/yolo_arrow_test_results/1_target_1_original.jpg\",\n        \"DEMO_DETECT_TEST/yolo_arrow_test_results/3_target_1_original.jpg\"\n    ]\n    \n    for image_path in test_images:\n        if not os.path.exists(image_path):\n            print(f\"❌ 图片不存在: {image_path}\")\n            continue\n            \n        print(f\"\\n📸 测试图片: {os.path.basename(image_path)}\")\n        \n        try:\n            # 使用PaddleOCR识别\n            results = ocr.predict(image_path)\n            \n            # 解析识别结果\n            def parse_ocr_results(results):\n                parsed = []\n                if results and len(results) > 0:\n                    ocr_result = results[0]\n                    if 'rec_texts' in ocr_result and ocr_result['rec_texts']:\n                        texts = ocr_result['rec_texts']\n                        scores = ocr_result.get('rec_scores', [])\n                        polys = ocr_result.get('rec_polys', [])\n                        \n                        for i in range(len(texts)):\n                            text = texts[i] if i < len(texts) else \"\"\n                            score = scores[i] if i < len(scores) else 0.0\n                            poly = polys[i] if i < len(polys) else []\n                            \n                            parsed.append({\n                                'bbox': poly.tolist() if hasattr(poly, 'tolist') else poly,\n                                'text': text,\n                                'confidence': score\n                            })\n                return parsed\n            \n            parsed_results = parse_ocr_results(results)\n            print(f\"🔍 解析结果: {len(parsed_results)} 个\")\n            \n            # 筛选数字结果\n            digit_results = []\n            for item in parsed_results:\n                text = item['text'].strip()\n                if any(c.isdigit() for c in text):\n                    digits = ''.join(c for c in text if c.isdigit())\n                    if len(digits) >= 1:\n                        item['digits'] = digits\n                        digit_results.append(item)\n            \n            if digit_results:\n                print(f\"✅ 找到数字: {len(digit_results)} 个\")\n                for i, item in enumerate(digit_results):\n                    print(f\"  {i+1}. 文本: '{item['text']}' -> 数字: '{item['digits']}' (置信度: {item['confidence']:.3f})\")\n            else:\n                print(\"❌ 未找到数字\")\n                if parsed_results:\n                    print(f\"  但识别到了: {[item['text'] for item in parsed_results]}\")\n                \n        except Exception as e:\n            print(f\"❌ 识别失败: {e}\")\n            import traceback\n            traceback.print_exc()\n    \n    print(\"\\n\" + \"=\" * 50)\n    print(\"🔍 简化测试完成\")\n\nif __name__ == \"__main__\":\n    simple_test() 